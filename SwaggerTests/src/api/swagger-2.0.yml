swagger: "2.0"
info:
  description: Familiarizing with swagger
  version: "1.0.0"
  title: SwaggerTests
  contact:
    email: gaffstranger@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: developer
    description: person who code
  - name: skill
    description: something, developer can
paths:
  /developer:
    put:
      tags:
        - developer
      summary: "Creates new developer"
      operationId: "createDev"
      responses:
        '405':
          description: Invalid input
#      security:
#        - dev_auth:
#            - 'write:developers'
#            - 'read:developers'
      requestBody:
        $ref: '#/components/requestBodies/Developer'
    post:
      tags:
        - developer
      summary: "Updates an existing developer"
      operationId: "updateDev"
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Developer not found
        '405':
          description: Validation exception
#      security:
#        - dev_auth:
#            - 'write:developers'
#            - 'read:developers'
      requestBody:
        $ref: '#/components/requestBodies/Developer'
  '/developer/{id}':
    get:
      tags:
        - developer
      summary: Find developer by ID
      description: Returns a single developer
      operationId: getById
      parameters:
        - name: id
          in: path
          description: ID of developer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Developer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Developer not found
#      security:
#        - api_key: []
    post:
      tags:
        - developer
      summary: Updates a developer with form data
      operationId: updateDevWithForm
      parameters:
        - name: id
          in: path
          description: ID of developer for update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
#      security:
#        - dev_auth:
#            - 'write:pets'
#            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the developer
                  type: string
                surname:
                  description: Updated surname of the developer
                  type: string
    delete:
      tags:
        - developer
      summary: Deletes a developer
      operationId: deleteDeveloper
      parameters:
#        - name: api_key
#          in: header
#          required: false
#          schema:
#            type: string
        - name: id
          in: path
          description: Developer id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Developer not found
#      security:
#        - petstore_auth:
#            - 'write:developers'
#            - 'read:developers'
  /developer/bySurname:
    get:
      tags:
        - developer
      summary: Gets developers by surname
      description: "Returns array of developers with the same surname"
      operationId: getDevelopersBySurname
      parameters:
        - name: surname
          in: query
          description: Surname of developers
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Developer'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Developer'
        '400':
          description: Invalid surname
#      security:
#        - dev_auth:
#            - 'write:developers'
#            - 'read:developers'
  /developer/bySkillLevel:
    get:
      tags:
        - developer
      summary: Gets developers by skill level
      description: "Returns array of developers with specified skills level"
      operationId: getDevelopersBySkillLevel
      parameters:
        - name: level
          in: query
          description: Skill level of developers
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Null
                - Low
                - Amateur
                - Advanced
                - Pro
                - Godlike
                - BeyondGodlike
              default: Advanced
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Developer'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Developer'
        '400':
          description: Invalid surname
#      security:
#        - dev_auth:
#            - 'write:developers'
#            - 'read:developers'
components:
  schemas:
    Developer:
      type: object
      required:
        - id
        - name
        - surname
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Stanislav
        surname:
          type: string
          example: Tretyakov
        age:
          type: integer
          format: int32
        skills:
          type: array
          xml:
            name: skills
            wrapped: true
          items:
            $ref: '#/components/schemas/Skill'
      xml:
        name: Developer
    Skill:
      type: object
      required:
        - name
        - level
      properties:
        name:
          type: string
          example: java
        level:
          type: string
          enum:
            - Null
            - Low
            - Amateur
            - Advanced
            - Pro
            - Godlike
            - BeyondGodlike
      xml:
        name: Skill
#    ApiResponse:
#          type: object
#          properties:
#            code:
#              type: integer
#              format: int32
#            type:
#              type: string
#            message:
#              type: string
  requestBodies:
    Developer:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Developer'
        application/xml:
          schema:
            $ref: '#/components/schemas/Developer'
      description: Developer object
      required: true
#  securitySchemes:
#    dev_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
#          scopes:
#            'write:pets': modify pets in your account
#            'read:pets': read your pets
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header