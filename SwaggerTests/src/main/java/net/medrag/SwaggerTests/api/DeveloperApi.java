/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.medrag.SwaggerTests.api;

import net.medrag.SwaggerTests.model.Developer;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-13T11:55:27.008+03:00[Europe/Moscow]")

/**
 * Swagger autogenerated
 */
@Validated
@Api(value = "developer", description = "the developer API")
public interface DeveloperApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Creates new developer", nickname = "createDev", notes = "", tags={ "developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/developer",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> createDev(@ApiParam(value = "Developer object" ,required=true )  @Valid @RequestBody Developer developer) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Deletes a developer", nickname = "deleteDeveloper", notes = "", tags={ "developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Developer not found") })
    @RequestMapping(value = "/developer/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteDeveloper(@ApiParam(value = "Developer id to delete",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Find developer by ID", nickname = "getById", notes = "Returns a single developer", response = Developer.class, tags={ "developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Developer.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Developer not found") })
    @RequestMapping(value = "/developer/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Developer> getById(@ApiParam(value = "ID of developer to return",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"skills\" : [ {    \"level\" : \"Advanced\",    \"name\" : \"java\"  }, {    \"level\" : \"Advanced\",    \"name\" : \"java\"  } ],  \"surname\" : \"Tretyakov\",  \"name\" : \"Stanislav\",  \"id\" : 0,  \"age\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Gets developers by skill level", nickname = "getDevelopersBySkillLevel", notes = "Returns array of developers with specified skills level", response = Developer.class, responseContainer = "List", tags={ "developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Developer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid surname") })
    @RequestMapping(value = "/developer/bySkillLevel",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Developer>> getDevelopersBySkillLevel(@NotNull @ApiParam(value = "Skill level of developers", required = true, allowableValues = "Null, Low, Amateur, Advanced, Pro, Godlike, BeyondGodlike") @Valid @RequestParam(value = "level", required = true) List<String> level) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"skills\" : [ {    \"level\" : \"Advanced\",    \"name\" : \"java\"  }, {    \"level\" : \"Advanced\",    \"name\" : \"java\"  } ],  \"surname\" : \"Tretyakov\",  \"name\" : \"Stanislav\",  \"id\" : 0,  \"age\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Gets developers by surname", nickname = "getDevelopersBySurname", notes = "Returns array of developers with the same surname", response = Developer.class, responseContainer = "List", tags={ "developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Developer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid surname") })
    @RequestMapping(value = "/developer/bySurname",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Developer>> getDevelopersBySurname(@NotNull @ApiParam(value = "Surname of developers", required = true) @Valid @RequestParam(value = "surname", required = true) List<String> surname) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"skills\" : [ {    \"level\" : \"Advanced\",    \"name\" : \"java\"  }, {    \"level\" : \"Advanced\",    \"name\" : \"java\"  } ],  \"surname\" : \"Tretyakov\",  \"name\" : \"Stanislav\",  \"id\" : 0,  \"age\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Updates an existing developer", nickname = "updateDev", notes = "", tags={ "developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Developer not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/developer",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updateDev(@ApiParam(value = "Developer object" ,required=true )  @Valid @RequestBody Developer developer) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Updates a developer with form data", nickname = "updateDevWithForm", notes = "", tags={ "developer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/developer/{id}",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updateDevWithForm(@ApiParam(value = "ID of developer for update",required=true) @PathVariable("id") Long id,@ApiParam(value = "Updated name of the developer") @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Updated surname of the developer") @RequestParam(value="surname", required=false)  String surname) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
