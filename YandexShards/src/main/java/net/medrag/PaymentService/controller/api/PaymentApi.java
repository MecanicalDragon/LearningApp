/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.medrag.PaymentService.controller.api;

import java.util.List;
import net.medrag.PaymentService.model.dto.Payment;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-12-12T03:56:05.857662200+03:00[Europe/Moscow]")

@Validated
@Api(value = "payment", description = "the payment API")
public interface PaymentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /payment/addList : Process multiple payments
     * Does more than one payment transaction
     *
     * @param payment Money operations list (required)
     * @return Mostly succesful. Payments, that have not been processed attached to the response body (status code 200)
     *         or Invalid data supplied (status code 400)
     */
    @ApiOperation(value = "Process multiple payments", nickname = "doMassPayment", notes = "Does more than one payment transaction", response = Payment.class, responseContainer = "List", tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Mostly succesful. Payments, that have not been processed attached to the response body", response = Payment.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid data supplied") })
    @RequestMapping(value = "/payment/addList",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<Payment>> doMassPayment(@ApiParam(value = "Money operations list" ,required=true )  @Valid @RequestBody List<Payment> payment) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 1, \"sender\" : 1, \"recipient\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payment/add : Process single payment
     * Transfers some amount from sender to recipient
     *
     * @param payment Money operation transaction (required)
     * @return Payment has been processed successfully (status code 200)
     *         or Invalid data supplied (status code 400)
     */
    @ApiOperation(value = "Process single payment", nickname = "doPayment", notes = "Transfers some amount from sender to recipient", tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Payment has been processed successfully"),
        @ApiResponse(code = 400, message = "Invalid data supplied") })
    @RequestMapping(value = "/payment/add",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> doPayment(@ApiParam(value = "Money operation transaction" ,required=true )  @Valid @RequestBody Payment payment) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /payment/bySender/{id} : Retrieve total spending by sender&#39;s id
     * Retrieves total spending by sender&#39;s id
     *
     * @param id Requested sender id (required)
     * @return successful operation (status code 200)
     *         or Invalid sender ID supplied (status code 400)
     *         or Database problem (status code 555)
     */
    @ApiOperation(value = "Retrieve total spending by sender's id", nickname = "getTotalSpending", notes = "Retrieves total spending by sender's id", response = Integer.class, tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 400, message = "Invalid sender ID supplied"),
        @ApiResponse(code = 555, message = "Database problem") })
    @RequestMapping(value = "/payment/bySender/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Integer> getTotalSpending(@Min(1L)@ApiParam(value = "Requested sender id",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
